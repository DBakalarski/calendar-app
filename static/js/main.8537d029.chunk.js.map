{"version":3,"sources":["enums/actionEnum.ts","components/SingleDay/SingleDay.js","components/Month/Month.js","data/actions/tasks.action.js","enums/modalEnum.ts","data/actions/modal.actions.js","components/TaskModal/TaskModal.js","App.js","data/reducers/tasks.reducer.js","data/reducers/modal.reducer.js","data/reducers/index.js","data/store.js","index.js"],"names":["actionTaskType","SingleDay","day","date","tasks","useSelector","state","filter","item","shallowEqual","className","length","Month","useParams","monthUrl","yearUrl","history","useHistory","useState","month","Number","year","setDate","daysInMonth","getDaysInMonth","Date","daysArray","Array","from","value","index","onClick","newMonth","newYear","push","map","format","modalVisibleType","TaskModal","dispatch","useDispatch","task","setTask","handleCloseModal","type","CLOSE_MODAL","class","onSubmit","e","preventDefault","key","uuidv4","ADD_TASK","payload","onChange","prevState","target","App","modalVisible","modal","basename","process","path","exact","to","OPEN_MODAL","initialState","tasksReducer","action","console","log","modalReducer","rootReducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8537d029.chunk.js","sourcesContent":["export enum actionTaskType {\r\n    ADD_TASK = \"ADD_TASK\",\r\n    DELETE_TASK = \"DELETE_TASK\"\r\n}","import React from 'react';\r\nimport './singleDay.scss'\r\n\r\nimport { shallowEqual, useSelector } from 'react-redux';\r\n\r\n\r\nexport interface TaskModalProps {\r\n    day: number,\r\n    date: string\r\n\r\n}\r\n\r\nconst SingleDay: React.FC<TaskModalProps> = ({ day, date }) => {\r\n    const tasks = useSelector(state => state.tasks.tasks.filter((item) => item.date === date), shallowEqual)\r\n\r\n    return (\r\n        <div className=\"single-day\">\r\n            <div>\r\n                {day}\r\n            </div>\r\n            <div className=\"tasks-number\">\r\n                {tasks.length ?\r\n                    <p>tasks: {tasks.length} </p>\r\n                    : null}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleDay;","import React, { useState } from 'react';\r\nimport './month.scss'\r\nimport {\r\n    useParams,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport { getDaysInMonth, format } from 'date-fns'\r\nimport SingleDay from '../SingleDay';\r\n\r\nconst Month = () => {\r\n    interface IUseParams {\r\n        monthUrl: string,\r\n        yearUrl: string\r\n    }\r\n\r\n    let { monthUrl, yearUrl }: IUseParams = useParams();\r\n    const history = useHistory();\r\n    const [date, setDate] = useState({\r\n        month: Number(monthUrl),\r\n        year: Number(yearUrl),\r\n    })\r\n\r\n    const { month, year } = date\r\n\r\n    const daysInMonth = getDaysInMonth(new Date(year, month - 1))\r\n\r\n    const daysArray = Array.from({ length: daysInMonth }, (value, index) => (\r\n        {\r\n            day: index + 1,\r\n        }\r\n    ));\r\n\r\n\r\n    const previousMonth = () => {\r\n        let newMonth = month;\r\n        let newYear = year;\r\n        if (newMonth === 1) {\r\n            newMonth = 12\r\n            newYear--\r\n        } else {\r\n            newMonth--\r\n        }\r\n\r\n        setDate({\r\n            month: newMonth,\r\n            year: newYear,\r\n        })\r\n\r\n        history.push(`/month/${newMonth}/${newYear}`)\r\n    }\r\n\r\n    const nextMonth = () => {\r\n        let newMonth = month;\r\n        let newYear = year;\r\n        if (newMonth === 12) {\r\n            newMonth = 1\r\n            newYear++\r\n        } else {\r\n            newMonth++\r\n        }\r\n\r\n        setDate({\r\n            month: newMonth,\r\n            year: newYear\r\n\r\n        })\r\n\r\n        history.push(`/month/${month}/${year}`)\r\n    }\r\n\r\n    const formatDate = (day: number) => {\r\n        return format(new Date(year, month - 1, day), 'yyyy-MM-dd');\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"month\">\r\n            <div className=\"buttons-date-container\">\r\n                <button className=\"button previous\" onClick={previousMonth}>\r\n                    previous month\r\n                </button>\r\n                <div className=\"date-actual\">{date.month} {date.year}</div>\r\n                <button className=\"button next\" onClick={nextMonth}>\r\n                    next month\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"days-container\">\r\n                {daysArray.map((item, index) => <SingleDay date={formatDate(item.day)} day={item.day} key={index} />)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Month;","import { actionTaskType } from \"../../enums/actionEnum\"\r\n\r\nexport const addTask = (value: string, date: string, key: string) => {\r\n    return {\r\n        type: actionTaskType.ADD_TASK,\r\n        payload: {\r\n            value,\r\n            date,\r\n            key\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export enum modalVisibleType {\r\n    OPEN_MODAL = \"OPEN_MODAL\",\r\n    CLOSE_MODAL = \"CLOSE_MODAL\"\r\n}","import { modalVisibleType } from \"../../enums/modalEnum\"\r\n\r\nexport const openModal = () => {\r\n    return {\r\n        type: modalVisibleType.OPEN_MODAL,\r\n    }\r\n}\r\n\r\nexport const closeModal = () => {\r\n    return {\r\n        type: modalVisibleType.CLOSE_MODAL,\r\n    }\r\n}\r\n","import './taskModal.scss'\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../../data/actions/tasks.action';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { closeModal } from '../../data/actions/modal.actions';\r\n\r\ninterface FormElements extends HTMLFormControlsCollection {\r\n    value: HTMLInputElement,\r\n    date: HTMLInputElement\r\n}\r\ninterface TasksFormElement extends HTMLFormElement {\r\n    elements: FormElements\r\n}\r\n\r\nconst TaskModal: React.FC<TaskModalProps> = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [task, setTask] = useState({\r\n        value: '',\r\n        date: ''\r\n    });\r\n\r\n    const handleSubmit = (e: React.FormEvent<TasksFormElement>) => {\r\n        e.preventDefault();\r\n        const inputDate = new Date(task.date)\r\n        handleCloseModal();\r\n        dispatch(addTask(task.value, task.date, uuidv4()))\r\n    }\r\n\r\n    const handleCloseModal = (): void => {\r\n        dispatch(closeModal())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <div onClick={handleCloseModal} className=\"close-modal\"> </div>\r\n                    <form class=\"form\" onSubmit={handleSubmit}>\r\n                        <div className=\"form-task-value\">\r\n                            <label>\r\n                                Task\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={task.value}\r\n                                    onChange={e => setTask(prevState => ({\r\n                                        ...prevState,\r\n                                        value: e.target.value\r\n                                    }))}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-task-date\">\r\n                            <label>\r\n                                Date\r\n                                <input\r\n                                    type=\"date\"\r\n                                    onChange={e => setTask(prevState => ({\r\n                                        ...prevState,\r\n                                        date: e.target.value\r\n                                    }))}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <button className=\"button submit\" type=\"submit\" > Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskModal;\r\n\r\n","\nimport './App.css';\nimport Month from './components/Month';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { format } from 'date-fns';\nimport TaskModal from './components/TaskModal';\nimport * as React from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { openModal } from './data/actions/modal.actions';\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const { modalVisible } = useSelector(state => state.modal, shallowEqual)\n\n  return (\n    <div className=\"app\" >\n      Calendar App\n      <Router>\n        <Switch>\n          <Route basename={process.env.PUBLIC_URL} path=\"/month/:monthUrl/:yearUrl\" >\n            <Month />\n          </Route>\n          <Route exact path=\"/\">\n            {/* @Todo get actual month */}\n            <Redirect to=\"/month/09/2021\" />\n          </Route>\n        </Switch>\n      </Router>\n      <button class=\"button add-task\" onClick={() => dispatch(openModal())}>Add Task</button>\n      {modalVisible ? <TaskModal /> : null}\n\n    </div>\n  );\n}\n\nexport default App;\n","import { actionTaskType } from \"../../enums/actionEnum\"\r\n\r\ninterface ITaskReducerActions {\r\n    type: actionTaskType,\r\n    payload: {\r\n        value: string,\r\n        date: string,\r\n        key: string\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n}\r\n\r\nexport const tasksReducer = (state = initialState, action: ITaskReducerActions) => {\r\n    switch (action.type) {\r\n        case actionTaskType.ADD_TASK:\r\n            console.log(state)\r\n            return {\r\n                tasks: [...state.tasks, {\r\n                    value: action.payload.value,\r\n                    date: action.payload.date,\r\n                    key: action.payload.key\r\n                }]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default tasksReducer;","import { modalVisibleType } from \"../../enums/modalEnum\"\r\n\r\ninterface IModalReducerActions {\r\n    type: modalVisibleType,\r\n}\r\n\r\nconst initialState = {\r\n    modalVisible: false,\r\n}\r\n\r\nexport const modalReducer = (state = initialState, action: IModalReducerActions) => {\r\n    switch (action.type) {\r\n        case modalVisibleType.OPEN_MODAL:\r\n            return {\r\n                ...state,\r\n                modalVisible: true\r\n            }\r\n        case modalVisibleType.CLOSE_MODAL:\r\n            return {\r\n                ...state,\r\n                modalVisible: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default modalReducer;","import { combineReducers } from \"redux\";\r\nimport tasksReducer from \"./tasks.reducer\";\r\nimport modalReducer from \"./modal.reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    modal: modalReducer\r\n})\r\n\r\nexport default rootReducers;","import { createStore } from 'redux'\r\nimport rootReducers from './reducers'\r\n\r\n\r\nconst store = createStore(rootReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './data/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}